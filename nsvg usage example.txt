
/// can be null
NSVGshape* draw_corners(image input) {
    int r = input.topleftcorner_p->r;
    int g = input.topleftcorner_p->g;
    int b = input.topleftcorner_p->b;

    char* topleft_type = rgb_to_string(input.topleftcorner_p);
    char* topright_type = rgb_to_string(input.toprightcorner_p);
    char* bottomleft_type = rgb_to_string(input.bottomleftcorner_p);
    char* bottomright_type = rgb_to_string(input.bottomrightcorner_p);

    if(topleft_type != topright_type ||
        topleft_type != bottomleft_type ||
        topleft_type != bottomright_type) {
        return NULL;
    }

    NSVGpaint newpaint = {
        NSVG_PAINT_COLOR,
        NSVG_RGB(r, g, b)
	};

    NSVGpaint newstroke = {
        NSVG_PAINT_NONE,
        NSVG_RGB(0, 0, 0)
	};

    NSVGshape* output = calloc(1, sizeof(NSVGshape));
    fill_char_array("border", output->id); //id of element
    output->fill = newpaint; // Fill paint
    output->stroke = newstroke; // Stroke paint

    // Top Path
    coordinate topstart = {0, 0};
    coordinate topend = {input.width, 0};
    NSVGpath* toppath = create_path(input, topstart, topend);

    // right Path
    coordinate rightstart = {input.width, 0};
    coordinate rightend = {input.width, input.height};
    NSVGpath* rightpath = create_path(input, rightstart, rightend);
    toppath->next = rightpath;

    // bottom Path
    coordinate bottomstart = {input.width, input.height};
    coordinate bottomend = {0, input.height};
    NSVGpath* bottompath = create_path(input, bottomstart, bottomend);
    rightpath->next = bottompath;
    
    // Left Path
    coordinate leftstart = {0, 0};
    coordinate leftend = {input.width, 0};
    NSVGpath* leftpath = create_path(input, topstart, topend);
    bottompath->next = leftpath;

    leftpath->next = toppath;
    output->paths = toppath;

    float* bounds[4] = { 0, 0, input.width, input.height };
    fill_float_array(bounds, BOUNDS_LENGTH, output->bounds, BOUNDS_LENGTH);

    return output;
}